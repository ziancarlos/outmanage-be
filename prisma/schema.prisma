// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int       @id @default(autoincrement())
  username     String    @unique @db.VarChar(50)
  roleId       Int
  password     String    @db.VarChar(255)
  accessToken  String?   @db.VarChar(255)
  refreshToken String?   @db.VarChar(255)
  deletedAt    DateTime?

  Role            Role              @relation(fields: [roleId], references: [roleId])
  UserActivityLog UserActivityLog[]

  InitiatedUserLogs UserLog[]          @relation("UserRelation") // Reference to logs the user initiated
  TargetedUserLogs  UserLog[]          @relation("TargetedUserRelation") // Reference to logs where the user is the target
  CustomerLog       CustomerLog[]
  ItemLog           ItemLog[]
  DeliveryOrderLog  DeliveryOrderLog[]
  FleetLog          FleetLog[]
  ShipmentLog       ShipmentLog[]

  @@map("users")
}

model Role {
  roleId Int    @id @default(autoincrement())
  name   String @unique @db.VarChar(50)

  RolePermission RolePermission[]
  User           User[]

  @@map("roles")
}

model Permission {
  permissionId Int    @id @default(autoincrement())
  name         String @unique @db.VarChar(50)

  RolePermission RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleHasPermissionId Int @id @default(autoincrement())
  roleId              Int
  permissionId        Int

  Role       Role       @relation(fields: [roleId], references: [roleId])
  Permission Permission @relation(fields: [permissionId], references: [permissionId])

  @@unique([roleId, permissionId])
  @@map("roles_has_permissions")
}

model UserActivityLog {
  userActivityLogId Int      @id @default(autoincrement())
  userId            Int?
  activityType      Int      @db.TinyInt
  createdAt         DateTime @default(now())
  ipAddress         String?  @db.VarChar(45)

  User User? @relation(fields: [userId], references: [userId])

  @@map("users_activities_logs")
}

model UserLog {
  userLogId      Int        @id @default(autoincrement())
  targetedUserId Int
  userId         Int
  changeType     ChangeType
  oldValue       Json?
  newValue       Json
  createdAt      DateTime   @default(now())

  TargetedUser User @relation("TargetedUserRelation", fields: [targetedUserId], references: [userId])
  User         User @relation("UserRelation", fields: [userId], references: [userId])

  @@map("users_logs")
}

model Customer {
  customerId    Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(100)
  CustomerLog   CustomerLog[]
  DeliveryOrder DeliveryOrder[]

  @@map("customers")
}

model CustomerLog {
  customerLogId Int        @id @default(autoincrement())
  customerId    Int
  userId        Int
  changeType    ChangeType
  oldValue      Json?
  newValue      Json
  createdAt     DateTime   @default(now())

  User     User     @relation(fields: [userId], references: [userId])
  Customer Customer @relation(fields: [customerId], references: [customerId])

  @@map("customers_logs")
}

model Item {
  itemId Int    @id @default(autoincrement())
  name   String @unique @db.VarChar(150)

  ItemLog            ItemLog[]
  DeliveryOrderItems DeliveryOrderItems[]

  @@map("items")
}

model ItemLog {
  itemLogId  Int        @id @default(autoincrement())
  userId     Int
  itemId     Int
  changeType ChangeType
  oldValue   Json?
  newValue   Json
  createdAt  DateTime   @default(now())

  User User @relation(fields: [userId], references: [userId])
  Item Item @relation(fields: [itemId], references: [itemId])

  @@map("items_logs")
}

model DeliveryOrder {
  deliveryOrderId Int     @id @default(autoincrement())
  customerId      Int
  address         String? @db.Text
  internalNotes   String? @db.Text

  status DeliveryOrderStatus @default(PENDING)

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  Customer              Customer                @relation(fields: [customerId], references: [customerId])
  DeliveryOrderLog      DeliveryOrderLog[]
  DeliveryOrderItems    DeliveryOrderItems[]
  ShipmentDeliveryOrder ShipmentDeliveryOrder[]

  @@map("delivery_orders")
}

model DeliveryOrderItems {
  deliveryOrderItemId Int       @id @default(autoincrement())
  deliveryOrderId     Int
  itemId              Int
  quantity            Int
  deletedAt           DateTime?

  DeliveryOrder             DeliveryOrder               @relation(fields: [deliveryOrderId], references: [deliveryOrderId])
  Item                      Item                        @relation(fields: [itemId], references: [itemId])
  ShipmentDeliveryOrderItem ShipmentDeliveryOrderItem[]

  @@unique([deliveryOrderId, itemId])
  @@map("delivery_orders_items")
}

model DeliveryOrderLog {
  deliveryOrderLogId Int        @id @default(autoincrement())
  deliveryOrderId    Int
  userId             Int
  changeType         ChangeType
  details            String     @db.Text
  createdAt          DateTime   @default(now())

  User          User          @relation(fields: [userId], references: [userId])
  DeliveryOrder DeliveryOrder @relation(fields: [deliveryOrderId], references: [deliveryOrderId])

  @@map("delivery_orders_logs")
}

model Fleet {
  fleetId          Int                @id @default(autoincrement())
  model            String             @db.VarChar(100)
  licensePlate     String             @unique @db.VarChar(20)
  ShipmentDelivery ShipmentDelivery[]

  @@map("fleets")
}

model FleetLog {
  fleetLogId Int        @id @default(autoincrement())
  userId     Int
  fleetId    Int
  changeType ChangeType
  oldValue   Json?
  newValue   Json
  createdAt  DateTime   @default(now())

  User User @relation(fields: [userId], references: [userId])

  @@map("fleets_logs")
}

model Shipment {
  shipmentId    Int     @id @default(autoincrement())
  internalNotes String? @db.Text

  loadGoodsPicture String? @db.VarChar(255)

  shipmentDeliveryId Int?
  shipmentPickupId   Int?

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  ShipmentDelivery      ShipmentDelivery?       @relation(fields: [shipmentDeliveryId], references: [shipmentDeliveryId])
  ShipmentPickup        ShipmentPickup?         @relation(fields: [shipmentPickupId], references: [shipmentPickupId])
  ShipmentDeliveryOrder ShipmentDeliveryOrder[]
  ShipmentLog           ShipmentLog[]

  @@map("shipments")
}

model ShipmentPickup {
  shipmentPickupId Int        @id @default(autoincrement())
  licensePlate     String     @unique @db.VarChar(20)
  Shipment         Shipment[]

  @@map("shipment_pickups")
}

model ShipmentDelivery {
  shipmentDeliveryId Int @id @default(autoincrement())
  fleetId            Int

  Fleet    Fleet      @relation(fields: [fleetId], references: [fleetId])
  Shipment Shipment[]

  @@map("shipment_deliveries")
}

model ShipmentDeliveryOrder {
  shipmentDeliveryOrderId   Int                        @id @default(autoincrement())
  shipmentId                Int
  deliveryOrderId           Int
  address                   String?                    @db.Text
  shipmentDeliveryOrderType ShipmentDeliveryOrderType?
  deletedAt                 DateTime?

  Shipment                  Shipment                    @relation(fields: [shipmentId], references: [shipmentId])
  DeliveryOrder             DeliveryOrder               @relation(fields: [deliveryOrderId], references: [deliveryOrderId])
  ShipmentDeliveryOrderItem ShipmentDeliveryOrderItem[]

  @@map("shipment_deliveries_orders")
}

model ShipmentDeliveryOrderItem {
  shipmentDeliveryOrderItemId Int       @id @default(autoincrement())
  shipmentDeliveryOrderId     Int
  deliveryOrderItemId         Int
  quantity                    Int
  deletedAt                   DateTime?

  DeliveryOrderItems    DeliveryOrderItems    @relation(fields: [deliveryOrderItemId], references: [deliveryOrderItemId])
  ShipmentDeliveryOrder ShipmentDeliveryOrder @relation(fields: [shipmentDeliveryOrderId], references: [shipmentDeliveryOrderId])

  @@map("shipment_deliveries_orders_items")
}

model ShipmentLog {
  shipmentLogId Int        @id @default(autoincrement())
  shipmentId    Int
  userId        Int
  changeType    ChangeType
  details       String     @db.Text
  createdAt     DateTime   @default(now())

  User     User     @relation(fields: [userId], references: [userId])
  Shipment Shipment @relation(fields: [shipmentId], references: [shipmentId])
}

enum ChangeType {
  CREATE
  UPDATE
  DELETE
}

enum ShipmentDeliveryOrderType {
  RUMAH
  KANTOR
  GUDANG
  EKSPEDISI
}

enum DeliveryOrderStatus {
  SELESAI
  PROSES
  PENDING
}
